name: Issue Validation and Labeling

on:
  issues:
    types: [opened, edited]

permissions:
  issues: write
  contents: read

jobs:
  validate-and-label:
    runs-on: ubuntu-latest
    steps:
      - name: Validate Issue Labels
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const labels = issue.labels.map(label => label.name);
            
            // Required label categories
            const priorityLabels = ['P0', 'P1', 'P2', 'P3', 'P4'];
            const typeLabels = ['bug', 'feature', 'enhancement', 'documentation', 'test', 'refactor', 'security', 'performance', 'maintenance', 'anti-pattern'];
            const areaLabels = labels.filter(label => label.startsWith('area:'));
            
            // Check for required labels
            const hasPriority = priorityLabels.some(label => labels.includes(label));
            const hasType = typeLabels.some(label => labels.includes(label));
            const hasArea = areaLabels.length > 0;
            
            let missingLabels = [];
            if (\!hasPriority) missingLabels.push('Priority (P0-P4)');
            if (\!hasType) missingLabels.push('Type (bug, feature, etc.)');
            if (\!hasArea) missingLabels.push('Area (area:*)');
            
            // Auto-add status:untriaged if no status label exists
            const statusLabels = labels.filter(label => label.startsWith('status:'));
            if (statusLabels.length === 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: ['status:untriaged']
              });
            }
            
            // Add validation comment if missing required labels
            if (missingLabels.length > 0) {
              const comment = `## 🏷️ Missing Required Labels
              
            This issue is missing the following required labels:
            ${missingLabels.map(label => `- ${label}`).join('\n')}
            
            **Required Labels:**
            - **Priority**: P0 (Critical), P1 (High), P2 (Medium), P3 (Low), P4 (Trivial)
            - **Type**: bug, feature, enhancement, documentation, test, refactor, security, performance, maintenance, anti-pattern
            - **Area**: At least one area:* label (e.g., area:pattern-detection, area:educational-content)
            
            Please add the appropriate labels to help with issue triage and management.
            
            ---
            *This comment was automatically generated by the issue validation workflow.*`;
            
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: comment
              });
              
              // Add needs-info label
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: ['status:needs-info']
              });
            }

      - name: Auto-label Anti-Pattern Issues
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const title = issue.title.toLowerCase();
            const body = issue.body?.toLowerCase() || '';
            
            // Auto-detect anti-pattern types and add appropriate labels
            const antiPatterns = {
              'infrastructure-without-implementation': ['infrastructure', 'custom implementation', 'sdk limitation', 'api limitation'],
              'symptom-driven-development': ['quick fix', 'workaround', 'temporary', 'band-aid'],
              'complexity-escalation': ['complex', 'sophisticated', 'multiple layers', 'over-engineering'],
              'documentation-neglect': ['no documentation', 'missing docs', 'undocumented']
            };
            
            const detectedPatterns = [];
            for (const [pattern, keywords] of Object.entries(antiPatterns)) {
              if (keywords.some(keyword => title.includes(keyword) || body.includes(keyword))) {
                detectedPatterns.push(`area:${pattern}`);
              }
            }
            
            if (detectedPatterns.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: detectedPatterns
              });
            }

      - name: Phase Auto-labeling
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const title = issue.title.toLowerCase();
            const body = issue.body?.toLowerCase() || '';
            
            // Auto-detect development phases
            if (title.includes('validation') || title.includes('proof') || body.includes('phase 0')) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: ['phase0']
              });
            } else if (title.includes('core') || title.includes('detection') || body.includes('phase 1')) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: ['phase1']
              });
            } else if (title.includes('mcp') || title.includes('server') || body.includes('phase 2')) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: ['phase2']
              });
            }